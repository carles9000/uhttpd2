/*
**	module.....: uhttpd2.js -- module control for uhttpd2 (Harbour)
**	version....: 0.81
**  last update: 21/08/2022
**
**	(c) 2022 by Carles Aubia
**
*/

const UHTTPD2_VERSION = 0.83;

$( document ).ready(function() { console.info( 'UHTTPD2 ' + UHTTPD2_VERSION) })

function UHttpd2() {

	var oDom = new UDom()

	this.GetLive = function( cId ) {
	

		//	Search in children of id
		
			var o = $("#" + cId ).find( "[data-live]" )	
		
		var oControls = new Object()	
		
		var id 

		for (i = 0; i < o.length; i++) {
		
			id = $(o[i]).attr( 'id')			
			
			
			var type =  $(o[i]).prop('type')
			
						
			oControls[ id ] = { type: 'input', 'value' : oDom.Get( id ) }
			
			switch ( type ) {
			
				case 'radio':
				
					var cName = $('#'+id).attr("name");
					var value = $( 'input[name=' + cName + ']:checked' ).val();
									
					oControls[ cName ] = { type: 'radio', 'value' : value }
								
					break;						
			}		
		}		

		return oControls	
	}
	
	this.InitOnChange = function( cId ) {
				
		//	Search in children of id
		
			var o 			= $("#" + cId ).find( "[data-onchange]" )		
		
		//	Check Ids with event
		
			if ( o.length == 0 )
				return null
			
		//	Check duplicated Id's for this event
		
			var nDuplicated = this.Duplicated_Ids( o, 'onchange' ) 
			
			if ( nDuplicated > 0 )		
				return nDuplicated

		for (i = 0; i < o.length; i++) {
		
			id = $(o[i]).attr( 'id') 
			
			

			$('#'+id ).bind( 'change', UOnChange )
		}

		return 0		
	}
	
	this.InitOnClick = function( cId ) {
		
		//	Search in children of id
		
			var o 			= $("#" + cId ).find( "[data-onclick]" )	

		//	Check Ids with event
		
			if ( o.length == 0 )
				return null
			
		//	Check duplicated Id's for this event in all DOM
		
			var nDuplicated = this.Duplicated_Ids( o, 'onclick' ) 
			
			if ( nDuplicated > 0 )		
				return nDuplicated
			
				
		
		for (i = 0; i < o.length; i++) {
		
			id = $(o[i]).attr( 'id')  
		
			$('#'+id ).bind( 'click', UOnClick )
		}			
		
		return 0	
	}
	
	this.InitOnInit = function( cId ) {
	
		//	exist api ?
		
			cApi 	= $('#'+ cId).data('api')

			if ( cApi == null )
				return null 		
		
		//	exist data-init in TDialog ?

			var cProc 			= $("#" + cId ).data( 'oninit' )	
		
			if ( cProc == null )
				return null 

		var oPar 				= new Object()
			oPar[ 'dlg' ] 		= cId
			oPar[ 'api' ] 		= cApi
			oPar[ 'proc' ] 		= cProc 
			oPar[ 'controls' ] 	= JSON.stringify( this.GetLive( cId ) )	

		UShoot( 'api', oPar )		
	}
	
	this.Duplicated_Ids = function( o, cEvent ) {
		// Warning Duplicate IDs
		var nDuplicated = 0	;
		
		$(o).each(function(){

		  var ids = $('[id="'+this.id+'"]');
		  
		  if(ids.length>1 && ids[0]==this) {
			nDuplicated++
			console.warn( cEvent + ' -> Multiple IDs #'+this.id);
		  }	
		});
		
		return ( nDuplicated > 0 )		
	}

}



function UInitDialog( cId ) {

	var h = new UHttpd2()

	console.log( 'InitDialog ready... => ' , cId )		

	//	We initialize our dialog with the different events 
	//	that we want to manage...

		var n = 0
	
		n = h.InitOnChange( cId )
		n = h.InitOnClick( cId )
		
		if ( n > 0 )
			console.warn( "Warning!, Dialog id => " + cId + ", maybe dont working correctly. Id's duplicated")

		
		
	//	The first thing we will do is manage if the oninit clause exists

		h.InitOnInit( cId )
}


function UOnChange() {
	
	var selectElement 	= event.target;
	var id 				= selectElement.id;
	
	//	We are looking for the dialog (parent)

	var oDlg	= $('#'+id).parents('[data-dialog]' )	
	
	if ( oDlg.length == 0 ){ 
		//alert( "data-dialog don't defined")
		UMsgError( "<b>Error: </b> html => data-dialog tag don't defined", 'Programming')
		return false 
	}
	
	var id_parent		= $(oDlg[0]).attr('id')	
	var proc			= $('#'+id).data('onchange')
	var oHttpd2			= new UHttpd2()
	
	var oPar 			= new Object()
		oPar[ 'dlg' ] 		= id_parent
		oPar[ 'api' ] 		= $('#'+id_parent).data('api')
		oPar[ 'proc' ] 		= proc 
		oPar[ 'controls' ] 	= JSON.stringify( oHttpd2.GetLive(id_parent) )

	UShoot( 'api', oPar )			
}

function UOnClick() {
	
	var selectElement 	= event.target;
	var id 				= selectElement.id;


	//	We are looking for the dialog (parent)

	var oDlg	= $('#'+id).parents('[data-dialog]' )	
	

	if ( oDlg.length == 0 ){ 
		//alert( "data-dialog don't defined")
		UDialog( 'sys', "<b>Error: </b> Html => data-dialog tag don't defined", 'Programming')
		return false 
	}


	
	var id_parent		= $(oDlg[0]).attr('id')		
	var proc			= $('#'+id).data('onclick')	
	var pbi				= $('#'+id).data('pbi')			//	[P]rocess [B]efore [I]nput

	
	if ( typeof pbi == 'string' ) {
		try {			
			var u = eval(pbi);
			if ( typeof u == 'boolean' ) {
				if ( u == false )
					return null
				
			} else 
				return null
			
		} catch (e) {		
			var cError = '<b>Parent Id:</b>' + id_parent + '<br><b>Id:</b> ' + id + '<br>' + '<b>Error pai:</b> '
			if (e instanceof SyntaxError) {
				cError += e.message				
			} else {
				cError += e				
				//throw e;
			}
			UMsg( cError, 'System Error' )
		}
	}

	
	var oHttpd2			= new UHttpd2()	

	
	var oPar 			= new Object()
		oPar[ 'dlg' ] 		= id_parent
		oPar[ 'api' ] 		= $('#'+id_parent).data('api')
		oPar[ 'proc' ] 		= proc 
		oPar[ 'controls' ] 	= JSON.stringify( oHttpd2.GetLive(id_parent) )	

	UShoot( 'api', oPar )			
}



//	Ajax to Api --------------------------------------------

function UShoot( url, oPar ) {

	$('#error').html( '' )

	//console.log( 'UShoot oPar', oPar )
/*
					xhrFields: {
					  withCredentials: true
				   }
				  */
				  
	//	Valid parameters
	
		if ( ! oPar.api  || oPar.api === '' ) {
			UMsgError( "<b>Error: </b> html => data-api tag don't defined", 'Programming' )
			return null
		}


	var oSend = $.ajax({
					type: "POST",
					url: url,
					data: oPar,	
					cache: false,
					async: false
				})
		.fail( function(data, u ){ 
			switch ( data.readyState ) {
				case 4:
					UMsgError( '<b>Route:</b> ' + cName + '<hr><br>' + data.responseText, 'Error' )
					break;
				case 0:
					UMsgError( '<b>Network error !</b>', 'Error' )
					break;
				
			}					
		})
				

	oSend.done( function( data ) { 
		
		//console.log( data )

			var o = new UDom()			
			
			//	Siempre recibiremos del server un hash
			//	Si es un string es que que cascado...			
			
			if (  $.type( data ) == 'string' ) {
			
				if ( data.length == 0 )
					return null 
			
				//	We can show error or msgerror or another trace system...
				//	At the moment whe can show...				
			
				//$('#error').html( data )				
				//return false 	
				
				try {
					data = jQuery.parseJSON( data )			
					
				} catch (e) {	
				
					if ( data ) {
						data.replace(/(\n)+/g, '<br />'); 
						UMsgError( data, 'System Error' )
					}
				}
			} 

			if ( data.confirm ) {	
			
				if ( ! confirm( data.confirm ) )
					return null													
			}
			
			if ( data.redirect ) {	
			
				switch ( data.redirect.type ) {
				
					case 'dialog':
						//UScreen( data.redirect.proc, 'dialog' )	
						UScreen( 'splash', 'dialog' )	
					
						break;
						
					case 'url':
				
						location.replace( data.redirect.proc );
				
						break;
				}
					
				return null				
			} 									
		
			if ( data.url ) {

				if ( data.url.target == '_self' ) 
					window.location.replace(  data.url.url )
				else 
					window.open( data.url.url, data.url.target, data.url.specs );
					
				return null				
			}

			if ( data.screen ) {
				
				//UScreen( 'client', '_dialog' )
				//UScreen( 'brw1', '_container', 'panel' )
				//UScreen( 'brw1', '_window' )
				
				if (typeof data.screen.proc == 'string' )				
					UScreen( data.screen.proc, data.screen.target, data.screen.id , data.screen.cargo )
				else {
					if ( data.screen.target == '_container' )  {					
						$('#' + data.screen.id ).html( data.screen.cargo )										
					}										
				}
			}
			
			if ( data.setter ) {

				for (i = 0; i < data.setter.length; i++) {
				
					id = data.setter[i]['id']						
					value = data.setter[i]['value']						
					
					o.Set( id, value )
				}								
			}
			
			if ( data.active ) {

				for (i = 0; i < data.active.length; i++) {
				
					id = data.active[i]['id']						
					value = data.active[i]['value']												
					
					o.Active( id, value )
				}								
			}	

			if ( data.test ) {
			
				for (i = 0; i < data.test.length; i++) {
				
					id = data.test[i]['id']						
					method = data.test[i]['method']												
					value = data.test[i]['value']	
	
					
					var table = Tabulator.findTable("#" + id)[0];

						table.addData( value )
						
						var data = table.getData();

						var row = table.getRow(1); //return row component with index of 1
						var rowData = row.getData();
				
				}			
			
			}
			
			if ( data.table ) {
			
			
				for (i = 0; i < data.table.length; i++) {																			
					
					id 			= data.table[i]['id']						
					action 		= data.table[i]['action']												
					value 		= data.table[i]['value']	
					msgconfirm 	= data.table[i]['msgconfirm']	

					var oTable = new UTable( id, action, value, msgconfirm )
					oTable.Run()										
				}						
			} 
			
			if ( data.class ) {

				for (i = 0; i < data.class.length; i++) {
				
					id = data.class[i]['id']						
					value = data.class[i]['class']	
					action = data.class[i]['action']

					o.Class( id, value, action )
				}								
			}

			if ( data.visibility ) {

				for (i = 0; i < data.visibility.length; i++) {
				
					id = data.visibility[i]['id']												
					action = data.visibility[i]['action']	
					
					o.Visibility( id, action )					
				}								
			}				

			if ( data.focus ) {	
				o.Focus( data.focus )
			}
			
			if ( data.js ) {
			
				//	We receive the order to execute a Javascript function...
			
				var fn =  window[ data.js[ 'func' ] ]
				
				if ( typeof fn == "function") {																			
					return fn.apply(null, [ data.js[ 'data' ] ] );										
				} 								
			}

			if ( data.alert) {
				UMsg(  data.alert, 'System')
			}			
			
			if ( data.error ) {	
				UMsgError( data.error, 'System Error')
			}

			if (data.dialog) {						
				UDialog( data.dialog.id, data.dialog.html, data.dialog.title )			
			}
	
			if ( data.dialogclose ) {			

				//	Our dialog will be inside a jquery dialog. We should check if the parent of our 
				//	dialog has a jquery dialog control class -> ui-dialog-content
			
				id_dlg = $('#' + data.dialogclose ).parent().attr('id');			
			
				if ( $('#' + id_dlg).hasClass( 'ui-dialog-content' ) == true ) {					
					$('#'+id_dlg).dialog('close');
					$('#'+id_dlg).dialog('destroy').remove();
				}								
			}		
			
		})						
		
}


//	Table control. Pluggin Tabulator -> http://tabulator.info/ ----------------------

function UTable( id, action, value, msgconfirm  ) {

	this.id = id
	this.action = action
	this.value = value
	this.msgconfirm = msgconfirm

	var table
	
	if (typeof UTable.rowsDeleted === 'undefined') 
		UTable.rowsDeleted = {};
	
	
	this.Init = function() {
		
		aColumns	= (typeof value.columns ) == 'object' ? value.columns : [] ;
		aData		= (typeof value.data ) == 'object' ? value.data : [] ;
		aConfig		= (typeof value.config ) == 'object' ? value.config : [] ;
		aPerformance= (typeof value.performance ) == 'object' ? value.performance : null ;
		
		//	Direct performance. Change & update --------
		//	aPerformance[ 'type' ] == 'direct'
		//	aPerformance[ 'api' ] == 'api_dbfedit'
		//	aPerformance[ 'proc' ] == 'update'
		//	--------------------------------------	
		
		//	El validator es un array que puede tener un monton de validaciones
		//	Es decir, cada vez q editemos una cell, podra pasar por muchas validaciones si queremos

		if ( aPerformance &&  $.type(value.columns) == 'array'  ) {	
	
		
			for (var i = 0; i < value.columns.length; i++) {

				if ( $.type( value.columns[i].validator ) != 'array' )
					value.columns[i].validator = []

								
				switch ( value.columns[i].formatter ) {
				
					case 'UFormatDate':
						value.columns[i].validator.push( { type: this.FormatDate, parameters: value.columns[i].editorParams } )
						break;
						
					case 'UFormatLogic':
						
						value.columns[i].formatter = this.FormatLogic
						break;						
				}
				
			
				switch ( aPerformance.type ) {				
				
					case 'direct':
						value.columns[i].validator.push( { type: this.TableDirect, parameters: { id: aPerformance.id, id_key: aPerformance.id_key, api: aPerformance.api, proc: aPerformance.proc, file: aPerformance.file } } )					
						break;										
				}				
			}								
		}
			
		
		var aSetup  = { 
			columns: aColumns,
			data: aData 
		}						
		for(var key in aConfig) {		
			aSetup[ key ] = aConfig[ key ];		 
		}
		

		table = new Tabulator("#" + id , aSetup )

		table.on("rowUpdated", function(row){
			console.log( 'rowUpdated', row )
		});
		
		table.on("rowDblClick", function(e, row){					
			console.log( 'rowDblClick', row.getData() )						
		});

		table.on("cellEdited", function(cell){

			var oPar = new Object()
				oPar[ '_recno' ] = cell.getData()._recno
				oPar[ 'value' ]  = cell.getValue()
				oPar[ 'field' ]  = cell.getColumn().getField()
			
		});		



	}
	
	this.Instance = function() {
		table = Tabulator.findTable("#" + this.id)[0];
		return table
	}

	this.Run = function( cAction ) {	

		cAction = (typeof cAction ) == 'string' ? cAction : this.action ;
	
		switch ( cAction ) {
		
			case 'init': 
				this.Init()
				break;
				
			case 'resetData': 
				
				table = this.Instance()
		
				if (typeof table != 'object' )
					return null				
					
				table.setData();
				table.clearCellEdited();				
				UTable.rowsDeleted = {}				
				
				break;								
				
			case 'addData': 
				
				table = this.Instance()
		
				if (typeof table != 'object' )
					return null				
					
//				{ 'data' => aData, 'top' => lTop, 'index' => nIndex } 	
				table.addData( this.value.data, this.value.top )
				
				//var rowIndex = row.getIndex();
				
				break;

			case 'getData': 
				
				table = this.Instance()
		
				if (typeof table != 'object' )
					return null						
				
				var o = table.getRows()	
				var oRows = {}				
				
                o.forEach(function (cell) { 

					var nIndex = cell.getIndex()					
					
					oRows[ nIndex ] = cell.getData()										
                });				
				
				
				//return table.getData() 
				return oRows
				break;
				
			case 'getSelectedData': 		

				table = this.Instance()
		
				if (typeof table != 'object' )
					return null				
			
				return  table.getSelectedData() 
				
				/*	No funciona row.getIndex()
				
				var o = table.getSelectedRows() 
				
				console.log( 'o', o )
				
				var oRows = {}
				
                o.forEach(function (row) { 
				
					console.log( 'row->', row )
					var nIndex = row.getIndex()
				
					console.log( 'INDEX', nIndex )					
					
					oRows[ nIndex ] = row.getData()										
                });				
				
				console.log( 'ROWS', oRows )
				*/
				
				break;
				
			case 'getDataDeleted': 							
			
				return UTable.rowsDeleted
				
				break;					
				
			case 'getDataChanged': 	

				table = this.Instance()			
		
				if (typeof table != 'object' )
					return null				
				
				var o =  table.getEditedCells()				                
				
							
				var oRows = {}				
				
                o.forEach(function (cell) { 
				
					var nIndex = cell.getRow().getIndex()									
					
					if ( !(nIndex in oRows) ){
						oRows[ nIndex ] = cell.getRow().getData()
					}
					
                });						
			
				return oRows			
				
				break;				

			case 'getEditedCells': 
				table = this.Instance()			
								
				var o =  table.getEditedCells()
				
                let rowSet = new Set();
                o.forEach(function (cell) {
                    rowSet.add(cell.getRow());
                });
				
								
                for (let row of rowSet) {
                    console.log(row.getData());
                }
				
				//	Borrem 
				
				table.clearCellEdited();
				
				
				o =  table.getEditedCells()
				
				
				var nLen = table.getDataCount()
				var c = table.getRows() 

				for ( i = 1; i <= nLen; i++ ){
					var row = table.getRow(i)
				
				}				
				
				break;
				
			case 'clearEdited': 
				
				table = this.Instance()								
		
				if (typeof table != 'object' )
					return null					
					
					
				table.clearCellEdited();
				
				UTable.rowsDeleted = {}

				break;
				
				
			case 'deleteRow': 
			
				
				table = this.Instance()								
		
				if (typeof table != 'object' )
					return null


				var selectedData = table.getSelectedData();					
				
				if ( selectedData.length == 0 )
					return null
					
				if ( this.msgconfirm && ! confirm( this.msgconfirm ) )
					return null
					
				var aIds = []				
				
				for (const index in selectedData ) {
					aIds.push( selectedData[ index ].id )
				
					UTable.rowsDeleted[ index ] = selectedData[ index ] 
				}
							
				table.deleteRow( aIds );				
				
				break;	

				
			case 'alert': 
		
				table = this.Instance()
		
				if (typeof table != 'object' )
					return null									
		
				table.alert( this.value )								
				
				break;				
		}		
	}
	
	this.TableDirect = function (cell, value, parameters) {
	
		//cell - the cell component for the edited cell
		//value - the new input value of the cell
		//parameters - the parameters passed in with the validator
		
		var nField = cell.getColumn().getField()

		if ( value == cell.getData()[ nField ] ) {					
			return true
		}			
		
		var lUpdated = false
		var cMsg 	 = null 
		var id_brw 	 = parameters.id
				
			if ( parameters.api && parameters.proc ) {
			
				var oPar = new Object()
					oPar[ 'api' ] 	= parameters.api
					oPar[ 'proc' ] 	= parameters.proc
					oPar[ 'dlg' ] 	= '*'
					


					var cKey = parameters.id_key
					
					var oControls = new Object()					
						oControls[ '*-file' ] 	= { 'type': 'input', 'value' : parameters.file }
						oControls[ '*-' + cKey ] = { 'type': 'input', 'value' : cell.getData()[ cKey ]  }
						oControls[ '*-value' ] = {  'type': 'input', 'value' : value }
						oControls[ '*-field' ] = { 'type': 'input', 'value' : cell.getColumn().getField() }

					oPar[ 'controls' ] 	= JSON.stringify( oControls )

							
				//	Send...
//								contentType:"application/json; charset=ISO-8859-1",
	
				var oSend = $.ajax({
								type: "POST",
								url: 'api',
								data: oPar,																
								async: false
							})
							

				oSend.done( function( dat ) { 			
		
							try {
								dat = jQuery.parseJSON( dat )										
							} catch (e) {	

								if ( dat ) {
									dat.replace(/(\n)+/g, '<br />'); 
									UMsg( dat, 'System Error' )
								}															
							}							
							
							if ( dat.data ) {
								if ( dat.data.updated == true ) {
									lUpdated = true	
								} 								
								
								if ( dat.data.msg ) 
									cMsg = dat.data.msg
							}
							
							if ( dat.confirm ) {				
								if ( ! confirm( dat.confirm ) )
									return null													
							}														

							if ( dat.screen ) {
								
								//UScreen( 'client', '_dialog' )
								//UScreen( 'brw1', '_container', 'panel' )
								//UScreen( 'brw1', '_window' )
								
								if (typeof dat.screen.proc == 'string' )				
									UScreen( dat.screen.proc, dat.screen.target, dat.screen.id , dat.screen.cargo )
								else {
									if ( dat.screen.target == '_container' )  {					
										$('#' + dat.screen.id ).html( dat.screen.cargo )										
									}										
								}
							}							
							
							
							
						})
						
				oSend.fail( function(data, u ){ 					
							switch ( data.readyState ) {
								case 4:
									UMsgError( '<b>Route:</b> ' + cName + '<hr><br>' + data.responseText, 'Error' )
									break;
								case 0:
									UMsgError( '<b>Network error !</b>', 'Error' )
									break;
								
							}							
						})	

							
				oSend.always( function( ) {

						})
					
			}
			
			
				
		if ( !lUpdated ) {
			if ( cMsg ) {
				UMsg( cMsg, 'System' )
			}
			
			//console.log('bug validator-> focus')
			cell.getElement().focus()
			//cell.clearValidation();	
		
			return false
		}
		
		return true 
	}
	
	
	this.FormatDate = function(cell, value, parameters) {
	
		var dateFormat = parameters.inputFormat 	//	"DD/MM/YYYY";		
		
		var lOk = moment(value, dateFormat, true).isValid();

		return lOk
	}
	
	
	this.FormatLogic = function(cell, formatterParams, onRendere) {
	
		var cImg = ''

		if (cell.getValue()) {

			if ( formatterParams.yes )
				cImg = '<img src="' + formatterParams.yes + '" width="' + formatterParams.width + '" height="' + formatterParams.height  + '" ></img>'

		} else {
		
			if ( formatterParams.no )
				cImg = '<img src="' + formatterParams.no + '" width="' + formatterParams.width + '" height="' + formatterParams.height  + '" ></img>'
		
		}
		
		return cImg 
	}
}



//	Ajax to Screen --------------------------------------------

function UScreenClean( cName ) {
	$('#' + cName).html( '' )
}

function UScreen( cName, cType, cId, cargo ) {

	cType 		= (typeof cType ) == 'string' ? cType : 'container' ;
	cId 		= (typeof cId ) == 'string' && cId.length > 0 ? cId : cName ;
	cargo		= (typeof cargo ) == 'string' ? cargo : '' ;
	
	
	$('#error').html( '' )
	
	var oPar = new Object()
		oPar[ 'dlg' 	] = cId
		oPar[ 'type' 	] = cType
		//oPar[ 'cargo' 	] = cargo


	
	$.post( cName, oPar  )		
		.done( function( data ) { 	

			if ( data.success == false ){
			
				if ( data.redirect ) {				
					UScreen( data.redirect.proc, data.redirect.type  )									
				} else { 				
					//alert( data.msg )
					UDialog( 'sys', data.msg, 'System Error' )					
				}
				
				return null
			}
			
			
			switch ( cType ){
			
				case '_container':									
					
					if ( $('#' + cId).length == 0 ) {
						var elem = document.createElement('div');
						elem.id 	= cId ;	
						document.body.appendChild(elem);						
					}
				
				
					$('#' + cId ).html( data.html )
					break;
					
				case '_dialog':
			
					if ( $('#' + cId).length > 0 ) {
						
						return null					
					}
				
			
					var cId_Dlg = '_dlg_' + cId 				

					if ( $('#' + cId_Dlg).length == 0 ) {
						var dlg_elem = document.createElement('div');					
						dlg_elem.id 	= cId_Dlg ;	
						document.body.appendChild(dlg_elem);						

					} else {
						
						return null
					}					
					
					if ( cargo.length == 0 )
						cargo = 'Dialog'
					
				
					$( '#' + cId_Dlg  )
						.addClass("TDlg_body")
						.html( data.html )
						.dialog({
							width: 'auto',
							height: 'auto',
							resizable:false,
							title: cargo,
							dialogClass: "TDlg",
							close: function () {
								$(this).dialog ('destroy').remove ();
							}
						});				
				
			
					
					break;
					
				case '_window':
				
				console.log( '_window', cName )
					window.open( cName, 'MyWind', cId );
				
					break;
			}
					
			
		})
		.fail( function(data, u ){ 
			console.log( 'Error', data )
			
			switch ( data.readyState ) {
				case 4:
					UMsgError( '<b>Route:</b> ' + cName + '<hr><br>' + data.responseText, 'Error' )
					break;
				case 0:
					UMsgError( '<b>Network error !</b>', 'Error' )
					break;
				
			}
		})

}

function UMsg( cHtml, cTitle ) { 
	
	if ( IsBootstrap() )
		UModal( cHtml, cTitle, 'info' )
	else
		UDialog( '_msg_', cHtml, cTitle, 'TDlg_Msg', 'info' ) 
}

function UMsgError( cHtml, cTitle ) {

	if ( IsBootstrap() )
		UModal( cHtml, cTitle, 'error' )
	else
		UDialog( '_msg_', cHtml, cTitle, 'TDlg_Msg', 'error' ) 				
}

//	------------------------------------------------------------

function UDialog( cId, cHtml, cTitle, cClass, cType ) {

	cId	= (typeof cId ) == 'string' ? cId : '_msg_' ;
	cTitle	= (typeof cTitle ) == 'string' ? cTitle : '' ;		
	cClass	= (typeof cClass ) == 'string' ? cClass : 'TDlg_Msg' ;		

	if ( $('#' + cId).length == 0 ) {
		var dlg_elem = document.createElement('div');					
		dlg_elem.id 	= cId ;	
		document.body.appendChild(dlg_elem);						
	} else {
		console.warn( 'Dialog exist id => ' + cId )
		return null
	}

	switch ( cType ) {
	
		case 'info': 	cTitle = ( cTitle === '' ) ? 'Information' : cTitle ; break;
		case 'error': 	cTitle = ( cTitle === '' ) ? 'Error System': cTitle ; break;
		default:
			cTitle = ( cTitle === '' ) ? 'Information' : cTitle ; 
	}
	
    var wWidth = $(window).width();
    var dWidth = wWidth * 0.8;		
    var wHeight = $(window).height();
    var dHeight = wHeight * 0.8;

//		.addClass("TDlg_Msg")

	switch ( cType ) {	
		case 'info'  : MsgSound( 'files/uhttpd2/sound/msg.mp3' 		 ); break;
		case 'error' : MsgSound( 'files/uhttpd2/sound/msg_error.mp3' ); break;
		default:
			MsgSound( 'files/uhttpd2/sound/msg.mp3' )
	}


	$( '#' + cId  )
		.html( cHtml )
		.dialog({
			width: 'auto',
			height: 'auto',
			maxWidth: dWidth,
			maxHeight: dHeight,
			minHeight: 'auto',
			modal: true,
			resizable: false,
			title: cTitle,
			dialogClass: cClass, 	//	"TDlg_Msg"
			close: function () {
				$(this).dialog ('destroy').remove ();
			}
		});				
	
	return null	
}

//	------------------------------------------------------------
//	UModal is for bootstrap framework...

function UModal( cHtml, cTitle, cType ) {

	cTitle	= (typeof cTitle ) == 'string' ? cTitle : '' ;	
	
	switch ( cType ) {
	
		case 'info': 	cTitle = ( cTitle === '' ) ? 'Information' : cTitle ; break;
		case 'error': 	cTitle = ( cTitle === '' ) ? 'Error System': cTitle ; break;
		default:
			cTitle = ( cTitle === '' ) ? 'Information' : cTitle ; 
	}	
	
	var cDialog = '<div class="modal fade">' +
				  '  <div class="modal-dialog">' +
				  '    <div class="modal-content">' 
				  
	if ( cTitle.length > 0 ) {
	
		cDialog +=  '      <div class="modal-header">' +
					'        <h4 class="modal-title">' + cTitle + '</h4>' +
					'        <button type="button" class="close" data-dismiss="modal">&times;</button>' +
					'      </div>' 
	}
	
	cDialog +=  '      <div class="modal-body" >' + cHtml + '</body>'
	
	/*
				  '      <div class="modal-footer">' +
				  '        <button type="button" class="btn btn-primary" data-dismiss="modal">Save</button>' +
				  '        <button type="button" class="btn btn-link" data-dismiss="modal">Cancel</button>' +
				  '      </div>' +
	*/
				  
	cDialog += 	  '    </div>' +
				  '  </div>' +
				  '</div>';

	$(cDialog).modal()
}

//	----------------------------------------------------

function IsBootstrap() {
	return ( typeof $().modal == 'function' )
}

//	UDom management system... ----------------------------------------------------

function UDom() {

	this.Set = function( id, value ) {
		var type =  $('#'+id ).prop('type')


		switch (type) {
		
			case 'password' :
			case 'textarea' :
			case 'text' :
			
				$('#'+id ).val( value )	
				break;
				
			case 'checkbox' :
			
				$('#'+id ).prop('checked', value );
				break;	

				
			case 'select-one' :
			
				$('#'+id ).val( value )	
				break;			
				
			default:
				

				$('#'+id ).html( value )			
		}	
	}
	
	this.Get = function( id ) {
	
		var type =  $('#'+id ).prop('type')
		var value = ''

		switch (type) {
		
			case 'password' :
			case 'textarea' :
			case 'text' :
			
				value = $('#'+id).val() 
				break;
				
			case 'checkbox' :
			
				value = $('#'+id).is(':checked')
				break;
				
				case 'select-one' :
			
				value = $('#'+id).val()
				break;	

			case 'radio' :
			
				value = $( 'input[name=' + id + ']:checked' ).val();
		

				if ( typeof value === 'undefined' )
					value = 0;	
				break;				
			
			default:
			
				var cClass = $('#'+id ).attr('class');	

				
				if ( typeof cClass == 'string' && cClass.indexOf("TGrid") >= 0) {									
					
					var oTable = new UTable( id )
					
					var cAll = $('#'+id ).data( 'all' )	

					lAll = ( typeof cAll == 'string' ) ? true : false 
					
					if ( lAll ) 
						aData = oTable.Run( 'getData' )
					else 
						aData = []
					
					value = { 	'updated' : oTable.Run( 'getDataChanged' ), 
								'deleted' : oTable.Run( 'getDataDeleted' ),
								'selected': oTable.Run( 'getSelectedData' ),
								'data' : aData }
				
					
				} else {
				
					value = $('#'+id ).html()			
				
				}								
		}	

		return value
	}
	
	//	INTERESANT. Recuperar Valors 
	//	http://jsfiddle.net/PKB9j/1/ 
	//	https://stackoverflow.com/questions/9579721/convert-html-table-to-array-in-javascript
	
	this.Array2TBody = function( value ) {
	
		var cRows = ''
		
		if ( value.length > 0 ) {
		
			for ( i = 0; i < value.length; i++) {
			
				cRows += '<tr>'
				
				for ( j = 0; j < value[i].length; j++) {
				
					cRows += '<td>'
					
					cType = typeof value[i][j]
					
					
					
					switch ( cType ) {
					
						case 'boolean':
							cRows += '<input type="checkbox" id="vehicle1" name="vehicle1" value="">'
							break;
							
						default:
						
							cRows += value[i][j].toString()											
					}
					
					cRows += '</td>'
				}
				
				cRows += '</tr>'					
			}								
		}	
	
		return cRows
	}
	
	this.Active = function( id, value ) {
	
		var type =  $('#'+id ).prop('type')
		

		switch (type) {
		
			case 'text' :
			
				$('#'+id ).prop( "disabled", ! value  );
				break;
				
			case 'checkbox' :		
				
				$('#'+id ).prop('disabled', ! value );
				
				break;		

			case 'button' :		
				
				$('#'+id ).prop('disabled', ! value );
				
				break;

			case 'select-one' :		
				
				$('#'+id ).prop('disabled', ! value );
				
				break;				
				
			default:
				

				$('#'+id ).html( value )			
		}	
	}
	
	this.Class = function( id, value, action ) {
					
		switch (action){
		
			case 'toggle':
				$('#'+id).toggleClass( value );							
				break;
			case 'on':
				$('#'+id).addClass( value );							
				break;
			case 'off':
				$('#'+id).removeClass( value );							
				break;																									
		}	
	}
	
	this.Visibility = function( id, value ) {
	
		switch (value){
	
			case 'toggle':
				$('#'+id).toggle();							
				break;
			case 'on':
				$('#'+id).show();
				break;
			case 'off':
				$('#'+id).hide();
				break;																									
		}
	}
	
	this.Focus = function( id ) {
		$('#'+id).focus() 
		$('#'+id).select() 
	}
	
}


//	----------------------------------------------------

function MsgSound( cFile ) {

	var audioElement = document.createElement('audio');
	audioElement.setAttribute('src', cFile );
	audioElement.setAttribute('autoplay', 'autoplay');
}